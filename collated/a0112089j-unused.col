//@author: a0112089j-unused



	/**
	 * origin: D:\Dropbox\workspace\cs2103jan2014-w13-2j\clc\logic\Remind.java
	 */

//Function is not mature enough

package clc.logic;

import static clc.common.Constants.MESSAGE_REMIND_TIMED_TASKS;
import static clc.common.Constants.MESSAGE_REMIND_DEADLINE_TASKS;
import static clc.common.Constants.TYPE_DEADLINE_TASK;
import static clc.common.Constants.TYPE_TIMED_TASK;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import clc.storage.Storage;

public class Remind {
	ArrayList<Task> internalMem;
	ArrayList<Date> timeToBeReminded;
	private ArrayList<Long> taskIdToBeReminded;
	static ArrayList<Task> reminderMem;

	public Remind() {
		internalMem = Storage.getInternalMem();
		timeToBeReminded = new ArrayList<Date>();
		reminderMem = new ArrayList<Task>();
		taskIdToBeReminded = new ArrayList<Long>();
	}

	public ArrayList<String> getToBeRemindedInfo() {
		ArrayList<String> taskInfo = new ArrayList<String>();
		for (int i = 0; i < internalMem.size(); i ++) {
			Task task = internalMem.get(i);
			retrieveTaskInfoIfReminderNeeded(taskInfo, task);
		}
		return taskInfo;
	}

	private void retrieveTaskInfoIfReminderNeeded(ArrayList<String> taskInfo,
			Task task) {
		if (task.getIsReminderNeeded() && !task.getIsDone()) {
			reminderMem.add(task);
			taskIdToBeReminded.add(task.getTaskId());
			switch (task.getTaskType()) {
			case TYPE_TIMED_TASK:
				remindTimedTask(taskInfo, task);
				break;
			case TYPE_DEADLINE_TASK:
				remindDeadlineTask(taskInfo, task);
				break;
			}
		}
	}

	private void remindDeadlineTask(ArrayList<String> taskInfo, Task task) {
		String endTime = formatDate(task.getEndTime());
		taskInfo.add(String.format(MESSAGE_REMIND_DEADLINE_TASKS, task.getTaskName(), endTime));
		Calendar reminderCalendar = (Calendar) task.getEndTime().clone();
		int intervalToBeReminded = -1*task.getReminderInterval();
		reminderCalendar.add(Calendar.MINUTE, intervalToBeReminded);
		timeToBeReminded.add(reminderCalendar.getTime());
	}

	private void remindTimedTask(ArrayList<String> taskInfo, Task task) {
		String startTime = formatDate(task.getStartTime());
		String endTime = formatDate(task.getEndTime());
		taskInfo.add(String.format(MESSAGE_REMIND_TIMED_TASKS, task.getTaskName(), startTime, endTime));
		Calendar reminderCalendar = (Calendar) task.getStartTime().clone();
		int intervalToBeReminded = -1*task.getReminderInterval();
		reminderCalendar.add(Calendar.MINUTE, intervalToBeReminded);
		timeToBeReminded.add(reminderCalendar.getTime());
	}

	public ArrayList<Date> getToBeRemindedTime() {
		return timeToBeReminded; 
	}

	public ArrayList<Long> getToBeRemindedTaskId() {
		return taskIdToBeReminded;
	}

	private String formatDate(Calendar calendar) {
		String date;
		SimpleDateFormat dateFormat = new SimpleDateFormat("EEE, d MMM yyyy h.mm a");
		date = dateFormat.format(calendar.getTime());
		date = date.replaceAll("AM", "am");
		date = date.replaceAll("PM", "pm");
		return date;
	}
	
	protected static ArrayList<Task> getReminderMem() {
		return reminderMem;
	}
}

	// End of segment: D:\Dropbox\workspace\cs2103jan2014-w13-2j\clc\logic\Remind.java





	/**
	 * origin: D:\Dropbox\workspace\cs2103jan2014-w13-2j\clc\ui\Reminder.java
	 */

//Function is not mature enough

package clc.ui;

import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JTextArea;

import java.awt.Color;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.TimerTask;
import java.awt.Font;

public class Reminder extends TimerTask {

	private JFrame frameReminder = new JFrame();
	private JTextArea reminderBox = new JTextArea();
	private JButton closeButton;
	
	public void run() {
		frameReminder.setVisible(true);
	}

	protected Reminder(String reminderInfo, final long taskId) {
		initializeFrame();
		initializeReminderBox(reminderInfo);
		initializeButton(taskId);
	}

	private void initializeFrame() {
		frameReminder.setAlwaysOnTop(true);
		frameReminder.setTitle("REMINDER");
		frameReminder.setResizable(false);
		frameReminder.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frameReminder.setBounds(100, 100, 500, 242);
		frameReminder.getContentPane().setBackground(Color.BLACK);
		frameReminder.getContentPane().setLayout(null);
	}

	private void initializeReminderBox(String reminderInfo) {
		reminderBox.setLineWrap(true);
		reminderBox.setFont(new Font("Monospaced", Font.BOLD, 17));
		reminderBox.setForeground(Color.WHITE);
		reminderBox.append(reminderInfo);
		reminderBox.setEditable(false);
		reminderBox.setBounds(12, 13, 470, 143);
		reminderBox.setBackground(Color.DARK_GRAY);
		frameReminder.getContentPane().add(reminderBox);
	}

	private void initializeButton(final long taskId) {
		closeButton = new JButton("Mark As Done");
		
		closeButton.setBounds(12, 169, 470, 25);
		closeButton.setBackground(Color.DARK_GRAY);
		closeButton.setForeground(Color.WHITE);
		actionWhenButtonIsPressed(taskId);
		requestFocusOnButton();
		frameReminder.getContentPane().add(closeButton);
	}

	private void actionWhenButtonIsPressed(final long taskId) {
		closeButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//UserInterface.markReminderTask(taskId);
				frameReminder.dispose();
			}
		});
	}

	private void requestFocusOnButton() {
		frameReminder.addWindowFocusListener(new WindowAdapter() {
			public void windowGainedFocus(WindowEvent e) {
				closeButton.requestFocusInWindow();
			}
		});
	}

}

	// End of segment: D:\Dropbox\workspace\cs2103jan2014-w13-2j\clc\ui\Reminder.java





